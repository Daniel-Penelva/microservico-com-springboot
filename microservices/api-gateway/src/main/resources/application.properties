spring.application.name=api-gateway
server.port=8080

#Eureka client
eureka.client.service-url.default-zone=http://eureka:password@localhost:8761/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

#Inventory service routes
spring.cloud.gateway.routes[0].id=inventory-service
spring.cloud.gateway.routes[0].uri=lb://inventory-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/inventory/**

#Order service routes
spring.cloud.gateway.routes[1].id=orders-service
spring.cloud.gateway.routes[1].uri=lb://orders-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order/**

#Product service routes
spring.cloud.gateway.routes[2].id=products-service
spring.cloud.gateway.routes[2].uri=lb://products-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/product/**

#Discovery Server routes
spring.cloud.gateway.routes[3].id=discovery-service
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[3].filters[0]=SetPath=/

#Discovery Server Static routes - mostra os recursos estáticos na interface web do servidor da eureka
spring.cloud.gateway.routes[4].id=discovery-service-static
spring.cloud.gateway.routes[4].uri=http://localhost:8761
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/**


#Actuator routes
#Inventory actuator routes
spring.cloud.gateway.routes[5].id=inventory-service-actuator
spring.cloud.gateway.routes[5].uri=lb://inventory-service/actuator/inventory/**
spring.cloud.gateway.routes[5].predicates[0]=Path=/actuator/inventory/**

#Orders actuator routes
spring.cloud.gateway.routes[6].id=orders-service-actuator
spring.cloud.gateway.routes[6].uri=lb://orders-service/actuator/orders/**
spring.cloud.gateway.routes[6].predicates[0]=Path=/actuator/orders/**

#Products actuator routes
spring.cloud.gateway.routes[7].id=products-service-actuator
spring.cloud.gateway.routes[7].uri=lb://products-service/actuator/products/**
spring.cloud.gateway.routes[7].predicates[0]=Path=/actuator/products/**


#Add filtros, SaveSession e TokenRelay para definir o comportamento do roteamento e manipulação de sessão e tokens de autenticação
#A propriedade abaixo configura o filtro padrão para salvar a sessão. Isso é útil quando precisa manter informações de sessão ao longo das solicitações, como em aplicativos da web onde é necessário rastrear o estado do usuário entre várias solicitações.
spring.cloud.gateway.default-filters[0]=SaveSession
#A propriedade abaixo configura o filtro padrão para retransmissão de token.
spring.cloud.gateway.default-filters[1]=TokenRelay

#Keycloak - copiei o link do 'inssuer' na interface do keycloak, esse link (servidor keycloak) é utilizado para verificar a validade das fichas emitidas pelo keycloak e garantir que eles venham de uma fonte confiável.
#Esta propriedade especifica o URI do emissor (issuer) do provedor de identidade Keycloak. O URI do emissor é o local onde o servidor de autorização (como Keycloak) está hospedado e onde os tokens de acesso são emitidos.
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8181/realms/microservices-realm

#Definimos o provedor com o valor keycloak (provedor de identidade)
#A propriedade abaixo define o provedor de identidade OAuth 2.0 que está sendo utilizado, que é o Keycloak neste caso.
spring.security.oauth2.client.registration.keycloak.provider=keycloak
#Define os escopos solicitados durante o processo de autorização. Neste caso, está definido apenas como "openid", que é um escopo padrão no protocolo OpenID Connect e é usado para obter informações de identidade do usuário.
spring.security.oauth2.client.registration.keycloak.scope=openid
#Especifica o ID do cliente OAuth 2.0 associado ao cliente que está se autenticando no provedor de identidade Keycloak. Este ID do cliente é fornecido pelo Keycloak ao registrar o cliente na sua instância.
spring.security.oauth2.client.registration.keycloak.client-id=microservices_client
#Esta propriedade define o segredo do cliente OAuth 2.0, que é uma credencial secreta usada para autenticar o cliente junto ao provedor de identidade Keycloak durante o fluxo de autorização.
spring.security.oauth2.client.registration.keycloak.client-secret=FXXRatJxCNuXmFEQamLJYm4YFz4kaukH
#Especifica o tipo de concessão OAuth 2.0 a ser usado durante o processo de autorização. Neste caso, está configurado como "authorization_code", que é um dos fluxos mais comuns do OAuth 2.0 e é usado quando um cliente deseja obter um token de acesso em nome de um usuário, que normalmente ocorre em aplicativos da web.
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#Esta propriedade define o URI de redirecionamento após o processo de autorização bem-sucedido. O valor {baseUrl} será substituído pela URL base do aplicativo no momento da execução.
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/keycloak

#Log
# Esta propriedade define o nível de log para o pacote raiz do aplicativo. No caso do root, configura-se para info. Isso significa que mensagens de log com nível INFO e superior serão registradas. Isso inclui mensagens INFO, WARN, ERROR, e FATAL. Mensagens de nível DEBUG não serão registradas, pois são de nível inferior a INFO.
logging.level.root=info

# Esta propriedade define o nível de log para o pacote específico org.springframework.cloud.gateway. Está configurado para trace, o nível de log mais detalhado. Com trace, todas as mensagens de log, incluindo aquelas de nível DEBUG, INFO, WARN, ERROR, e FATAL, serão registradas. Isso pode ser útil para depurar problemas específicos relacionados ao gateway, pois fornece um registro detalhado de todas as ações executadas pelo gateway.
logging.level.org.springframework.cloud.gateway=trace

# Esta propriedade define o nível de log para a classe RouteDefinitionRouteLocator dentro do pacote org.springframework.cloud.gateway.route. Está configurado como info, o que significa que apenas mensagens de log de nível INFO e superior serão registradas para essa classe específica. Isso permite um controle mais granular sobre o nível de log para partes específicas do aplicativo, o que pode ser útil para ajustar a quantidade de detalhes registrados dependendo da necessidade.
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=info


#Actuator
management.endpoints.web.exposure.include=health
management.endpoints.web.base-path=/actuator
