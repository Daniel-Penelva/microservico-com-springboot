spring.application.name=orders-service
server.port=0
# O valor zero da porta é para gerar uma porta aletória

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.datasource.url=jdbc:mysql://localhost:3306/ms_orders
spring.datasource.username=root
spring.datasource.password=root

#Eureka client
eureka.client.service-url.default-zone=http://eureka:password@localhost:8761/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

#Keycloak
#Esta propriedade especifica o URI do conjunto de chaves JSON Web Key (JWK) que contém as chaves públicas usadas para validar tokens JWT. No contexto do OAuth 2.0 e do OpenID Connect, um provedor de identidade normalmente publica um conjunto de chaves (JWK set) que são usadas pelos servidores de recursos para validar a assinatura dos tokens JWT emitidos pelo provedor de identidade.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/microservices-realm/protocol/openid-connect/certs

#Actuator
#Esta propriedade define quais endpoints serão expostos via APIs da Web. No caso específico, ao incluir "health", o endpoint de saúde da aplicação será disponibilizado para acesso.
management.endpoints.web.exposure.include=health

#Esta propriedade define o caminho base para os endpoints expostos via APIs da Web. Neste caso, os endpoints estarão disponíveis a partir do caminho "/actuator/orders".
management.endpoints.web.base-path=/actuator/orders

#Esta propriedade determina quando os detalhes do endpoint de saúde devem ser exibidos. Com o valor "always", os detalhes serão sempre mostrados.
management.endpoint.health.show-details=always

#Esta propriedade habilita ou desabilita o monitoramento dos circuit breakers, que são mecanismos utilizados para lidar com falhas em sistemas distribuídos. Ao definir como "true", os circuit breakers estarão habilitados para monitoramento.
management.health.circuitbreakers.enabled=true


#Resilience4j - Circuit Breaker
#Esta propriedade indica se um indicador de saúde deve ser registrado para o circuit breaker do "orders-service".
resilience4j.circuitbreaker.instances.orders-service.register-health-indicator=true

#Define o tamanho da janela deslizante para o circuit breaker do "orders-service".
resilience4j.circuitbreaker.instances.orders-service.sliding-window-size=5

#Especifica o tipo de janela deslizante baseada em contagem para o circuit breaker do "orders-service".
resilience4j.circuitbreaker.instances.orders-service.sliding-window-type=count_based

#Define o limite de taxa de falha em porcentagem para o circuit breaker do "orders-service".
resilience4j.circuitbreaker.instances.orders-service.failure-rate-threshold=50

#Determina a duração de espera no estado aberto em segundos para o circuit breaker do "orders-service".
resilience4j.circuitbreaker.instances.orders-service.wait-duration-in-open-state=10s

#Habilita ou desabilita a transição automática do estado aberto para o meio aberto para o circuit breaker do "orders-service".
resilience4j.circuitbreaker.instances.orders-service.automatic-transition-from-open-to-half-open-enabled=true

#Define o número permitido de chamadas no estado meio aberto para o circuit breaker do "orders-service".
resilience4j.circuitbreaker.instances.orders-service.permitted-number-of-calls-in-half-open-state=3


#Kafka - Essas configurações são essenciais para garantir a correta comunicação e manipulação de dados entre o aplicativo Spring e o cluster Kafka, garantindo a serialização adequada dos dados enviados e recebidos.
#Esta propriedade define a lista de servidores Kafka aos quais o aplicativo Spring Kafka se conectará inicialmente. No caso específico, "localhost:9092" indica que o aplicativo se conectará ao servidor Kafka local na porta 9092.
spring.kafka.bootstrap-servers=localhost:9092

#Esta propriedade determina o número de tentativas que o produtor Kafka fará ao enviar mensagens antes de considerar a operação como falha. Neste caso, está configurado para 1 tentativa.
spring.kafka.producer.retries=1

#Aqui, a propriedade define o serializador a ser usado para a chave das mensagens produzidas. Neste caso, o serializador de chave está configurado como StringSerializer da biblioteca Kafka.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

#Esta propriedade especifica o serializador a ser utilizado para os valores das mensagens produzidas. No caso, o serializador de valor está definido como StringSerializer da biblioteca Kafka.
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer